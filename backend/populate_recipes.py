#!/usr/bin/env python3
"""
Script to populate the database with sample recipes including real images from the internet.
Run this script to add common Polish recipes with real food images to your empty database.
"""

import sys
import os
import base64
import io
import requests
import hashlib
import time
from urllib.parse import quote

# Add the project root directory to Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from PIL import Image as PILImage
    PILLOW_AVAILABLE = True
except ImportError:
    PILLOW_AVAILABLE = False
    print("‚ö†Ô∏è  Pillow not available. Images will not be processed.")
    print("   Install with: pip install Pillow==10.2.0")

from backend.database import SessionLocal
from backend.models.recipe import Recipe, RecipeIngredient, ComplexityLevel
from backend.models.ingredient import Ingredient
from backend.models.user import User

# Unsplash API configuration
UNSPLASH_ACCESS_KEY = "your_unsplash_access_key"  # Get from https://unsplash.com/developers
UNSPLASH_BASE_URL = "https://api.unsplash.com"

# Create images directory if it doesn't exist
IMAGES_DIR = os.path.join(os.path.dirname(__file__), "images")
if not os.path.exists(IMAGES_DIR):
    os.makedirs(IMAGES_DIR)
    print(f"‚úÖ Created images directory: {IMAGES_DIR}")

def download_recipe_image(recipe_name, recipe_id):
    """Download a real food image from Unsplash API"""
    
    if not PILLOW_AVAILABLE:
        print(f"   ‚ö†Ô∏è  Pillow not available, skipping image download")
        return None, None
    
    try:
        # Create a clean filename for the image
        clean_name = "".join(c for c in recipe_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        clean_name = clean_name.replace(' ', '_').lower()
        filename = f"{clean_name}_{str(recipe_id)[:8]}.jpg"
        filepath = os.path.join(IMAGES_DIR, filename)
        
        # Check if image already exists
        if os.path.exists(filepath):
            print(f"   üìÅ Using existing image: {filename}")
            with open(filepath, 'rb') as f:
                image_bytes = f.read()
            return image_bytes, filename
        
        # Search for images on Unsplash
        search_terms = [
            f"{recipe_name} food",
            f"{recipe_name}",
            "polish food",
            "homemade food",
            "traditional food"
        ]
        
        image_url = None
        for search_term in search_terms:
            print(f"   üîç Searching for: {search_term}")
            
            # Try Unsplash first
            if UNSPLASH_ACCESS_KEY and UNSPLASH_ACCESS_KEY != "your_unsplash_access_key":
                image_url = search_unsplash_image(search_term)
                if image_url:
                    break
            
            # Fallback to placeholder service
            if not image_url:
                image_url = get_placeholder_food_image(search_term)
                if image_url:
                    break
        
        if not image_url:
            print(f"   ‚ùå No suitable image found")
            return None, None
        
        # Download the image
        print(f"   ‚¨áÔ∏è  Downloading image...")
        response = requests.get(image_url, timeout=10)
        response.raise_for_status()
        
        # Process the image
        image = PILImage.open(io.BytesIO(response.content))
        
        # Resize and optimize
        target_width, target_height = 800, 600
        image = resize_and_crop_image(image, target_width, target_height)
        
        # Save to file
        image.save(filepath, "JPEG", quality=85, optimize=True)
        print(f"   üíæ Saved to: images/{filename}")
        
        # Convert to bytes for database
        buffer = io.BytesIO()
        image.save(buffer, "JPEG", quality=85, optimize=True)
        image_bytes = buffer.getvalue()
        
        # Check file size
        size_kb = len(image_bytes) / 1024
        print(f"   üìè Image size: {size_kb:.1f} KB")
        
        return image_bytes, filename
        
    except Exception as e:
        print(f"   ‚ùå Error downloading image: {e}")
        return None, None

def search_unsplash_image(search_term):
    """Search for images on Unsplash"""
    try:
        headers = {
            "Authorization": f"Client-ID {UNSPLASH_ACCESS_KEY}"
        }
        
        params = {
            "query": search_term,
            "page": 1,
            "per_page": 10,
            "orientation": "landscape",
            "category": "food"
        }
        
        response = requests.get(
            f"{UNSPLASH_BASE_URL}/search/photos",
            headers=headers,
            params=params,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data['results']:
                # Get the first suitable image
                for result in data['results']:
                    # Prefer regular size (better quality/size ratio)
                    return result['urls']['regular']
        
        return None
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Unsplash search error: {e}")
        return None

def get_placeholder_food_image(search_term):
    """Get a placeholder food image as fallback"""
    try:
        # Use a food-specific placeholder service
        food_categories = {
            "nale≈õniki": "pancakes",
            "makaron": "pasta", 
            "omlet": "omelette",
            "owsianka": "oatmeal",
            "zupa": "soup",
            "chleb": "bread",
            "sur√≥wka": "salad",
            "ziemniaki": "potatoes",
            "koktajl": "smoothie",
            "herbata": "tea"
        }
        
        # Try to match recipe name to food category
        category = "food"
        for polish_word, english_word in food_categories.items():
            if polish_word.lower() in search_term.lower():
                category = english_word
                break
        
        # Use Picsum with a food-related seed
        seed = abs(hash(search_term)) % 1000
        placeholder_url = f"https://picsum.photos/800/600?random={seed}"
        
        return placeholder_url
        
    except Exception:
        return None

def resize_and_crop_image(image, target_width, target_height):
    """Resize and crop image to target dimensions while maintaining aspect ratio"""
    
    # Convert to RGB if necessary
    if image.mode != 'RGB':
        image = image.convert('RGB')
    
    # Calculate ratios
    img_width, img_height = image.size
    target_ratio = target_width / target_height
    img_ratio = img_width / img_height
    
    if img_ratio > target_ratio:
        # Image is wider than target, crop width
        new_height = img_height
        new_width = int(img_height * target_ratio)
        left = (img_width - new_width) // 2
        top = 0
        right = left + new_width
        bottom = img_height
    else:
        # Image is taller than target, crop height
        new_width = img_width
        new_height = int(img_width / target_ratio)
        left = 0
        top = (img_height - new_height) // 2
        right = img_width
        bottom = top + new_height
    
    # Crop and resize
    image = image.crop((left, top, right, bottom))
    image = image.resize((target_width, target_height), PILImage.Resampling.LANCZOS)
    
    return image

def image_bytes_to_base64(image_bytes):
    """Convert image bytes to base64 data URL"""
    if not image_bytes:
        return None
    
    try:
        base64_string = base64.b64encode(image_bytes).decode()
        return f"data:image/jpeg;base64,{base64_string}"
    except Exception as e:
        print(f"   ‚ùå Error converting to base64: {e}")
        return None

def setup_unsplash_api():
    """Setup Unsplash API key if not configured"""
    global UNSPLASH_ACCESS_KEY
    
    if UNSPLASH_ACCESS_KEY == "your_unsplash_access_key":
        print("\nüîë Unsplash API Setup")
        print("=" * 40)
        print("To download high-quality food images:")
        print("1. Go to https://unsplash.com/developers")
        print("2. Create a free account and app")
        print("3. Copy your Access Key")
        print("4. Set it in this script or as environment variable")
        print()
        
        # Try to get from environment
        env_key = os.getenv('UNSPLASH_ACCESS_KEY')
        if env_key:
            UNSPLASH_ACCESS_KEY = env_key
            print("‚úÖ Found Unsplash API key in environment variables")
            return True
        
        # Ask user for key
        user_key = input("Enter your Unsplash Access Key (or press Enter to use placeholders): ").strip()
        if user_key:
            UNSPLASH_ACCESS_KEY = user_key
            print("‚úÖ Unsplash API key configured")
            return True
        else:
            print("‚ö†Ô∏è  Using placeholder images instead")
            return False
    
    return True

# Sample recipes with ingredients and preparation steps
SAMPLE_RECIPES = [
    {
        "name": "Klasyczne nale≈õniki",
        "preparation_time": 30,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zmiksuj sk≈Çadniki na g≈Çadkie ciasto",
            "Odstaw ciasto na 10 minut do odpoczyniƒôcia", 
            "Sma≈º cienkie placki na ≈õrednim ogniu do zarumienienia"
        ],
        "ingredients": [
            ("MƒÖka pszenna", 250.0),  # 1 szklanka ‚âà 250g
            ("Mleko krowie", 250.0),  # 1 szklanka ‚âà 250ml
            ("Jajka", 2.0),
            ("Olej s≈Çonecznikowy", 15.0),  # 1 ≈Çy≈ºka ‚âà 15ml
            ("S√≥l kuchenna", 2.0)  # szczypta ‚âà 2g
        ]
    },
    {
        "name": "Awaryjne chlebki z patelni",
        "preparation_time": 25,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zagnieƒá ciasto z mƒÖki, jogurtu, proszku do pieczenia, soli i oleju",
            "Podziel na 6 r√≥wnych czƒô≈õci i uformuj kulki",
            "Rozwa≈Çkuj ka≈ºdƒÖ kulkƒô na cienki placek",
            "Sma≈º na suchej patelni po 2 minuty z ka≈ºdej strony"
        ],
        "ingredients": [
            ("MƒÖka pszenna", 200.0),
            ("Jogurt naturalny", 125.0),
            ("Proszek do pieczenia", 5.0),  # 1 ≈Çy≈ºeczka ‚âà 5g
            ("S√≥l kuchenna", 2.0),  # 1/4 ≈Çy≈ºeczki ‚âà 2g
            ("Olej s≈Çonecznikowy", 30.0)  # 2 ≈Çy≈ºki ‚âà 30ml
        ]
    },
    {
        "name": "Makaron aglio e olio",
        "preparation_time": 15,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Ugotuj makaron w osolonej wodzie al dente wed≈Çug instrukcji na opakowaniu",
            "Pokr√≥j czosnek w cienkie plasterki",
            "Na patelni rozgrzej oliwƒô, dodaj czosnek i p≈Çatki chili, sma≈º do zarumienienia",
            "Wymieszaj odcedzony makaron z aromatycznƒÖ oliwƒÖ",
            "Dopraw solƒÖ i podawaj natychmiast"
        ],
        "ingredients": [
            ("Makaron pszenny", 200.0),
            ("Czosnek", 3.0),
            ("Oliwa z oliwek", 40.0),
            ("P≈Çatki chili", 1.0),  # szczypta
            ("S√≥l kuchenna", 3.0)
        ]
    },
    {
        "name": "Jajecznica na ma≈õle",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Roztrzep jajka w misce, dopraw solƒÖ i pieprzem",
            "Roztop mas≈Ço na patelni na ma≈Çym ogniu",
            "Wlej roztrzepane jajka na patelniƒô",
            "Mieszaj ≈ÇopatkƒÖ na ma≈Çym ogniu do osiƒÖgniƒôcia lubianej konsystencji"
        ],
        "ingredients": [
            ("Jajka", 4.0),
            ("Mas≈Ço", 25.0),
            ("S√≥l kuchenna", 2.0),
            ("Pieprz czarny mielony", 1.0)
        ]
    },
    {
        "name": "Owsianka na wodzie",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zagotuj wodƒô z szczyptƒÖ soli w garnku",
            "Wsyp p≈Çatki owsiane do wrzƒÖcej wody",
            "Gotuj na ma≈Çym ogniu przez 5 minut, czƒôsto mieszajƒÖc",
            "Podawaj z miodem lub owocami wed≈Çug upodoba≈Ñ"
        ],
        "ingredients": [
            ("P≈Çatki owsiane", 125.0),  # 1/2 szklanki ‚âà 125g
            ("Woda", 250.0),  # 1 szklanka
            ("S√≥l kuchenna", 1.0),
            ("Mi√≥d", 15.0),  # opcjonalnie
            ("Jab≈Çka", 1.0)  # opcjonalnie
        ]
    },
    {
        "name": "Placuszki z banan√≥w i jajek",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zblenduj banany z jajkami na g≈ÇadkƒÖ masƒô",
            "Rozgrzej patelniƒô bez t≈Çuszczu",
            "Sma≈º ma≈Çe placuszki po 1 minucie z ka≈ºdej strony",
            "Podawaj od razu po usma≈ºeniu"
        ],
        "ingredients": [
            ("Banan", 2.0),
            ("Jajka", 2.0)
        ]
    },
    {
        "name": "Sur√≥wka z marchewki",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zetrzyj marchewkƒô na tarce o grubych oczkach",
            "Dodaj sok z cytryny i cukier",
            "Wymieszaj wszystkie sk≈Çadniki",
            "Odstaw na 5 minut, aby marchewka pu≈õci≈Ça sok"
        ],
        "ingredients": [
            ("Marchewka", 2.0),
            ("Cytryna", 0.5),  # sok z po≈Çowy cytryny
            ("Cukier bia≈Çy", 5.0)  # 1 ≈Çy≈ºeczka
        ]
    },
    {
        "name": "Domowy sos vinaigrette",
        "preparation_time": 5,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Wlej wszystkie sk≈Çadniki do s≈Çoiczka",
            "WstrzƒÖ≈õnij energicznie do po≈ÇƒÖczenia sk≈Çadnik√≥w",
            "Skosztuj i dostosuj przyprawy wed≈Çug upodoba≈Ñ",
            "Przechowuj w lod√≥wce do 1 tygodnia"
        ],
        "ingredients": [
            ("Oliwa z oliwek", 45.0),  # 3 ≈Çy≈ºki
            ("Ocet winny", 15.0),  # 1 ≈Çy≈ºka
            ("Musztarda", 2.5),  # 1/2 ≈Çy≈ºeczki
            ("S√≥l kuchenna", 2.0),
            ("Pieprz czarny mielony", 1.0)
        ]
    },
    {
        "name": "Pieczone ziemniaki",
        "preparation_time": 45,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Umyj ziemniaki i pokr√≥j w √≥semki (nie obieraj)",
            "Wymieszaj z olejem i solƒÖ w misce",
            "Roz≈Ç√≥≈º na blasze wy≈Ço≈ºonej papierem do pieczenia",
            "Piecz w 200¬∞C przez 35 minut, przewracajƒÖc w po≈Çowie czasu"
        ],
        "ingredients": [
            ("Ziemniaki", 600.0),  # 4 ≈õrednie ziemniaki ‚âà 600g
            ("Olej s≈Çonecznikowy", 30.0),  # 2 ≈Çy≈ºki
            ("S√≥l kuchenna", 5.0)  # 1 ≈Çy≈ºeczka
        ]
    },
    {
        "name": "Zupa pomidorowa z koncentratu",
        "preparation_time": 15,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Doprowad≈∫ bulion do wrzenia w garnku",
            "Wmieszaj koncentrat pomidorowy do gorƒÖcego bulionu",
            "Gotuj przez 5 minut na ma≈Çym ogniu",
            "Zabiel ≈õmietankƒÖ i dopraw solƒÖ oraz pieprzem"
        ],
        "ingredients": [
            ("Bulion warzywny (kostka)", 2.0),  # na 1l bulionu
            ("Koncentrat pomidorowy", 30.0),  # 2 ≈Çy≈ºki
            ("≈ömietana 30%", 100.0),
            ("S√≥l kuchenna", 3.0),
            ("Pieprz czarny mielony", 1.0),
            ("Woda", 1000.0)
        ]
    },
    {
        "name": "Omlet francuski",
        "preparation_time": 8,
        "complexity": ComplexityLevel.MEDIUM,
        "steps": [
            "RozmƒÖƒá jajka z solƒÖ w misce",
            "Roztop mas≈Ço na patelni na ≈õrednim ogniu",
            "Wlej roztrzepane jajka na patelniƒô",
            "≈ÅopatkƒÖ podsuwaj brzegi omleta ku ≈õrodkowi",
            "Gdy jeszcze lekko p≈Çynny, zwi≈Ñ na po≈Çowƒô i prze≈Ç√≥≈º na talerz"
        ],
        "ingredients": [
            ("Jajka", 3.0),
            ("Mas≈Ço", 15.0),
            ("S√≥l kuchenna", 2.0)
        ]
    },
    {
        "name": "Domowy lemoniad",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Wyci≈õnij sok z cytryny",
            "Rozpu≈õƒá cukier w odrobinie ciep≈Çej wody",
            "Po≈ÇƒÖcz sok cytrynowy z syropem cukrowym",
            "Dolej resztƒô zimnej wody i dok≈Çadnie wymieszaj",
            "Sch≈Ç√≥d≈∫ w lod√≥wce przed podaniem"
        ],
        "ingredients": [
            ("Cytryna", 1.0),
            ("Woda", 500.0),
            ("Cukier bia≈Çy", 30.0)  # 2 ≈Çy≈ºki
        ]
    },
    {
        "name": "Kluski ≈õlƒÖskie",
        "preparation_time": 40,
        "complexity": ComplexityLevel.MEDIUM,
        "steps": [
            "Ugotuj ziemniaki do miƒôkko≈õci, ostudziƒá i przeci≈õnij przez praskƒô",
            "Dodaj mƒÖkƒô ziemniaczanƒÖ, jajko i s√≥l do ziemniak√≥w",
            "Zagnieƒá g≈Çadkie ciasto (nie za d≈Çugo)",
            "Uformuj niewielkie kulki z charakterystycznƒÖ dziurkƒÖ",
            "Gotuj w osolonej wodzie przez 3 minuty od wyp≈Çyniƒôcia"
        ],
        "ingredients": [
            ("Ziemniaki", 500.0),  # ugotowane
            ("MƒÖka ziemniaczana", 150.0),
            ("Jajka", 1.0),
            ("S√≥l kuchenna", 5.0)
        ]
    },
    {
        "name": "Sos czosnkowy",
        "preparation_time": 35,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zetrzyj czosnek na drobnej tarce lub przez praskƒô",
            "Wymieszaj jogurt z majonezem",
            "Dodaj starty czosnek, s√≥l i pieprz",
            "Wymieszaj wszystkie sk≈Çadniki",
            "Sch≈Ç√≥d≈∫ w lod√≥wce przez 30 minut przed podaniem"
        ],
        "ingredients": [
            ("Jogurt naturalny", 200.0),
            ("Czosnek", 1.0),
            ("Majonez", 15.0),  # 1 ≈Çy≈ºka
            ("S√≥l kuchenna", 2.0),
            ("Pieprz czarny mielony", 1.0)
        ]
    },
    {
        "name": "Kanapka BLT",
        "preparation_time": 12,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Podsma≈º plastry bekonu na patelni do chrupko≈õci",
            "Opiecz kromki chleba w tosterze",
            "Posmaruj pieczywo majonezem",
            "U≈Ç√≥≈º na chlebie sa≈Çatƒô, plastry pomidora i bekon",
            "Przykryj drugƒÖ kromkƒÖ i delikatnie doci≈õnij"
        ],
        "ingredients": [
            ("Boczek", 60.0),  # 2 plastry ‚âà 60g
            ("Pomidor", 0.5),  # 2 plasterki
            ("Sa≈Çata mas≈Çowa", 20.0),  # 2 li≈õcie
            ("Chleb pszenny", 60.0),  # 2 kromki
            ("Majonez", 20.0)
        ]
    },
    {
        "name": "Herbata miƒôtowa",
        "preparation_time": 8,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Op≈Çucz ≈õwie≈ºe li≈õcie miƒôty",
            "Zalej li≈õcie wrzƒÖtkiem",
            "Parz przez 5 minut pod przykryciem",
            "Odced≈∫ li≈õcie i dos≈Ç√≥d≈∫ wed≈Çug upodoba≈Ñ"
        ],
        "ingredients": [
            ("Miƒôta ≈õwie≈ºa", 10.0),  # 1 gar≈õƒá ‚âà 10g
            ("Woda", 300.0),
            ("Cukier bia≈Çy", 10.0)  # opcjonalnie
        ]
    },
    {
        "name": "Prosta focaccia",
        "preparation_time": 100,  # w≈ÇƒÖcznie z czasem na wyro≈õniƒôcie
        "complexity": ComplexityLevel.MEDIUM,
        "steps": [
            "Wymieszaj mƒÖkƒô z dro≈ºd≈ºami w misce",
            "Dodaj ciep≈ÇƒÖ wodƒô i 1 ≈Çy≈ºkƒô oliwy, zagnieƒá ciasto",
            "Prze≈Ç√≥≈º do naoliwionej miski, przykryj i wyrastaj 1 godzinƒô",
            "Prze≈Ç√≥≈º na naoliwionƒÖ blachƒô, posmaruj pozosta≈ÇƒÖ oliwƒÖ",
            "Posyp solƒÖ i rozmarynem, piecz 20 min w 220¬∞C"
        ],
        "ingredients": [
            ("MƒÖka pszenna", 250.0),
            ("Woda", 160.0),  # ciep≈Ça
            ("Dro≈ºd≈ºe instant", 4.0),
            ("Oliwa z oliwek", 30.0),  # 2 ≈Çy≈ºki
            ("S√≥l kuchenna", 5.0),
            ("Rozmaryn suszony", 2.0)
        ]
    },
    {
        "name": "Jednosk≈Çadnikowy d≈ºem z jab≈Çek",
        "preparation_time": 60,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Umyj, obierz i pokr√≥j jab≈Çka w kostkƒô",
            "W≈Ç√≥≈º do garnka o grubym dnie",
            "Du≈õ na ma≈Çym ogniu przez 40 minut, czƒôsto mieszajƒÖc",
            "Mia≈ºd≈º widelcem do osiƒÖgniƒôcia po≈ºƒÖdanej konsystencji",
            "Prze≈Ç√≥≈º do sterylnych s≈Çoik√≥w i zakrƒôƒá"
        ],
        "ingredients": [
            ("Jab≈Çka", 1000.0)  # 1 kg
        ]
    },
    {
        "name": "Szybka tortilla z mƒÖki kukurydzianej",
        "preparation_time": 15,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Wymieszaj mƒÖkƒô kukurydzianƒÖ z solƒÖ",
            "Dodaj ciep≈ÇƒÖ wodƒô i zagnieƒá g≈Çadkie ciasto",
            "Podziel na 6 r√≥wnych czƒô≈õci i uformuj kulki",
            "Rozwa≈Çkuj ka≈ºdƒÖ kulkƒô na cienki placek",
            "Sma≈º na suchej patelni po 30 sekund z ka≈ºdej strony"
        ],
        "ingredients": [
            ("MƒÖka kukurydziana", 120.0),
            ("Woda", 90.0),  # ciep≈Ça
            ("S√≥l kuchenna", 1.0)
        ]
    },
    {
        "name": "Koktajl banan-kakao",
        "preparation_time": 5,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Obierz banana i pokr√≥j w kawa≈Çki",
            "W≈Ç√≥≈º wszystkie sk≈Çadniki do blendera",
            "Blenduj przez 30 sekund do uzyskania g≈Çadkiej konsystencji",
            "Podawaj natychmiast lub sch≈Ç√≥d≈∫ w lod√≥wce"
        ],
        "ingredients": [
            ("Banan", 1.0),
            ("Mleko krowie", 200.0),
            ("Kakao w proszku", 5.0)  # 1 ≈Çy≈ºeczka
        ]
    }
]

def create_default_user(db):
    """Create a default user for recipes if none exists."""
    user = db.query(User).filter(User.email == "admin@recipes.local").first()
    if not user:
        user = User(
            email="admin@recipes.local"
        )
        db.add(user)
        db.commit()
        db.refresh(user)
        print("‚úÖ Created default user: admin@recipes.local")
    return user

def find_ingredient_by_name(db, name):
    """Find ingredient by name, trying different variations."""
    # Pr√≥buj dok≈Çadnej nazwy
    ingredient = db.query(Ingredient).filter(Ingredient.name == name).first()
    if ingredient:
        return ingredient
    
    # Pr√≥buj bez doprecyzowa≈Ñ w nawiasach
    simple_name = name.split('(')[0].strip()
    ingredient = db.query(Ingredient).filter(Ingredient.name == simple_name).first()
    if ingredient:
        return ingredient
    
    # Mapowania dla specjalnych przypadk√≥w
    name_mappings = {
        "P≈Çatki owsiane": "P≈Çatki owsiane",
        "Proszek do pieczenia": "Proszek do pieczenia", 
        "P≈Çatki chili": "Papryka chili suszona",
        "Mi√≥d": "Mi√≥d naturalny",
        "MƒÖka ziemniaczana": "MƒÖka ziemniaczana",
        "Koncentrat pomidorowy": "Koncentrat pomidorowy",
        "Dro≈ºd≈ºe instant": "Dro≈ºd≈ºe instant",
        "Rozmaryn suszony": "Rozmaryn suszony",
        "Miƒôta ≈õwie≈ºa": "Miƒôta",
        "MƒÖka kukurydziana": "MƒÖka kukurydziana",
        "Kakao w proszku": "Kakao",
        "Chleb pszenny": "Chleb",
        "Ocet winny": "Ocet"
    }
    
    if name in name_mappings:
        mapped_name = name_mappings[name]
        ingredient = db.query(Ingredient).filter(Ingredient.name == mapped_name).first()
        if ingredient:
            return ingredient
    
    return None

def populate_recipes():
    """Add sample recipes to the database."""
    db = SessionLocal()
    try:
        print("üçΩÔ∏è  Starting to populate recipes database...")
        
        # Setup Unsplash API for image downloading
        setup_unsplash_api()
        
        # Check if recipes already exist
        existing_count = db.query(Recipe).count()
        if existing_count > 0:
            print(f"‚ö†Ô∏è  Database already contains {existing_count} recipes.")
            response = input("Do you want to add more recipes anyway? (y/N): ")
            if response.lower() != 'y':
                print("‚ùå Operation cancelled.")
                return
        
        # Create default user
        default_user = create_default_user(db)
        
        added_count = 0
        skipped_count = 0
        missing_ingredients = set()
        
        for recipe_data in SAMPLE_RECIPES:
            # Check if recipe already exists
            existing = db.query(Recipe).filter(Recipe.name == recipe_data["name"]).first()
            if existing:
                print(f"‚è≠Ô∏è  Skipping '{recipe_data['name']}' - already exists")
                skipped_count += 1
                continue
            
            # Download real image for recipe
            print(f"   üì∏ Downloading real image for '{recipe_data['name']}'...")
            temp_id = hashlib.md5(recipe_data["name"].encode()).hexdigest()[:8]
            image_bytes, filename = download_recipe_image(recipe_data["name"], temp_id)
            image_data = image_bytes_to_base64(image_bytes) if image_bytes else None
            
            if image_data:
                size_kb = len(image_data.encode()) / 1024
                print(f"   ‚úÖ Downloaded image ({size_kb:.1f} KB) ‚Üí {filename}")
            else:
                print(f"   ‚ö†Ô∏è  No image downloaded (network error or API unavailable)")
            
            # Create new recipe
            recipe = Recipe(
                name=recipe_data["name"],
                preparation_time_minutes=recipe_data["preparation_time"],
                complexity_level=recipe_data["complexity"],
                steps=recipe_data["steps"],
                author_id=default_user.id,
                image_data=image_data
            )
            db.add(recipe)
            db.flush()  # Get the recipe ID
            
            # Add ingredients
            ingredients_added = 0
            for ingredient_name, amount in recipe_data["ingredients"]:
                ingredient = find_ingredient_by_name(db, ingredient_name)
                if ingredient:
                    recipe_ingredient = RecipeIngredient(
                        recipe_id=recipe.id,
                        ingredient_id=ingredient.id,
                        amount=amount,
                        is_optional="false"
                    )
                    db.add(recipe_ingredient)
                    ingredients_added += 1
                else:
                    missing_ingredients.add(ingredient_name)
                    print(f"   ‚ö†Ô∏è  Missing ingredient: {ingredient_name}")
            
            print(f"‚úÖ Added recipe: {recipe_data['name']} ({ingredients_added}/{len(recipe_data['ingredients'])} ingredients)")
            added_count += 1
        
        # Commit all changes
        db.commit()
        
        # Check how many recipes have images
        recipes_with_images = db.query(Recipe).filter(Recipe.image_data.isnot(None)).count()
        total_recipes = db.query(Recipe).count()
        
        print(f"\nüéâ Successfully populated database!")
        print(f"   - Added: {added_count} new recipes")
        print(f"   - Skipped: {skipped_count} existing recipes")
        print(f"   - Total recipes in database: {total_recipes}")
        print(f"   - Recipes with images: {recipes_with_images}/{total_recipes} ({recipes_with_images/total_recipes*100:.1f}%)")
        
        if PILLOW_AVAILABLE and added_count > 0:
            print(f"   - Real images downloaded: ~200KB each, saved to backend/images/")
        elif not PILLOW_AVAILABLE and added_count > 0:
            print(f"   - ‚ö†Ô∏è  Install Pillow to process images: pip install Pillow==10.2.0")
        
        if missing_ingredients:
            print(f"\n‚ö†Ô∏è  Missing ingredients ({len(missing_ingredients)}):")
            for ingredient in sorted(missing_ingredients):
                print(f"   - {ingredient}")
            print("\nüí° Consider running populate_ingredients.py first or adding these ingredients manually.")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Error populating database: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    populate_recipes()