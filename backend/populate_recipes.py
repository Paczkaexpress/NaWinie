#!/usr/bin/env python3
"""
Script to populate the database with sample recipes including images from local folder.
Run this script to add common Polish recipes with local images to your empty database.
"""

import sys
import os
import base64
import io
import hashlib

# Add the project root directory to Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from PIL import Image as PILImage
    PILLOW_AVAILABLE = True
except ImportError:
    PILLOW_AVAILABLE = False
    print("‚ö†Ô∏è  Pillow not available. Images will not be processed.")
    print("   Install with: pip install Pillow==10.2.0")

from backend.database import SessionLocal
from backend.models.recipe import Recipe, RecipeIngredient, ComplexityLevel
from backend.models.ingredient import Ingredient
from backend.models.user import User

# Images directory configuration
IMAGES_DIR = os.path.join(os.path.dirname(os.path.dirname(__file__)), "backend", "images")

def normalize_recipe_name_to_filename(recipe_name):
    """Convert recipe name to filename format (no Polish chars, words joined with _)"""
    # Polish characters mapping
    polish_chars = {
        'ƒÖ': 'a', 'ƒá': 'c', 'ƒô': 'e', '≈Ç': 'l', '≈Ñ': 'n', '√≥': 'o', '≈õ': 's', '≈∫': 'z', '≈º': 'z',
        'ƒÑ': 'A', 'ƒÜ': 'C', 'ƒò': 'E', '≈Å': 'L', '≈É': 'N', '√ì': 'O', '≈ö': 'S', '≈π': 'Z', '≈ª': 'Z'
    }
    
    # Replace Polish characters
    normalized = recipe_name
    for polish_char, replacement in polish_chars.items():
        normalized = normalized.replace(polish_char, replacement)
    
    # Remove special characters and normalize spaces
    normalized = ''.join(c if c.isalnum() or c.isspace() else '' for c in normalized)
    
    # Replace spaces with underscores and convert to lowercase
    normalized = '_'.join(normalized.split()).lower()
    
    return normalized

def load_local_recipe_image(recipe_name):
    """Load recipe image from local background/images folder"""
    
    if not PILLOW_AVAILABLE:
        print(f"   ‚ö†Ô∏è  Pillow not available, skipping image loading")
        return None, None
    
    try:
        # Generate filename from recipe name
        filename_base = normalize_recipe_name_to_filename(recipe_name)
        
        # Try different image extensions
        extensions = ['.jpg', '.jpeg', '.png', '.webp']
        image_path = None
        actual_filename = None
        
        for ext in extensions:
            potential_path = os.path.join(IMAGES_DIR, filename_base + ext)
            if os.path.exists(potential_path):
                image_path = potential_path
                actual_filename = filename_base + ext
                break
        
        if not image_path:
            print(f"   ‚ùå No image found for '{recipe_name}' (expected: {filename_base}.[jpg|jpeg|png|webp])")
            return None, None
        
        # Load and process the image
        print(f"   üìÅ Loading local image: {actual_filename}")
        
        with open(image_path, 'rb') as f:
            image_bytes = f.read()
        
        # Process the image with PIL
        image = PILImage.open(io.BytesIO(image_bytes))
        
        # Resize and optimize if needed
        target_width, target_height = 800, 600
        image = resize_and_crop_image(image, target_width, target_height)
        
        # Convert to optimized JPEG bytes
        buffer = io.BytesIO()
        image.save(buffer, "JPEG", quality=85, optimize=True)
        processed_image_bytes = buffer.getvalue()
        
        # Check file size
        size_kb = len(processed_image_bytes) / 1024
        print(f"   ‚úÖ Loaded and processed image ({size_kb:.1f} KB)")
        
        return processed_image_bytes, actual_filename
        
    except Exception as e:
        print(f"   ‚ùå Error loading image for '{recipe_name}': {e}")
        return None, None

def resize_and_crop_image(image, target_width, target_height):
    """Resize and crop image to target dimensions while maintaining aspect ratio"""
    
    # Convert to RGB if necessary
    if image.mode != 'RGB':
        image = image.convert('RGB')
    
    # Calculate ratios
    img_width, img_height = image.size
    target_ratio = target_width / target_height
    img_ratio = img_width / img_height
    
    if img_ratio > target_ratio:
        # Image is wider - crop width
        new_width = int(img_height * target_ratio)
        left = (img_width - new_width) // 2
        top = 0
        right = left + new_width
        bottom = img_height
    else:
        # Image is taller - crop height  
        new_height = int(img_width / target_ratio)
        left = 0
        top = (img_height - new_height) // 2
        right = img_width
        bottom = top + new_height
    
    # Crop and resize
    image = image.crop((left, top, right, bottom))
    image = image.resize((target_width, target_height), PILImage.Resampling.LANCZOS)
    
    return image

def image_bytes_to_base64(image_bytes):
    """Convert image bytes to base64 data URL"""
    if not image_bytes:
        return None
    
    try:
        base64_string = base64.b64encode(image_bytes).decode()
        return f"data:image/jpeg;base64,{base64_string}"
    except Exception as e:
        print(f"   ‚ùå Error converting to base64: {e}")
        return None

def check_images_directory():
    """Check if images directory exists and list available images"""
    if not os.path.exists(IMAGES_DIR):
        print(f"‚ùå Images directory does not exist: {IMAGES_DIR}")
        print("   Please create the directory and add recipe images")
        return False
    
    # List available images
    image_files = []
    extensions = ['.jpg', '.jpeg', '.png', '.webp']
    
    for file in os.listdir(IMAGES_DIR):
        if any(file.lower().endswith(ext) for ext in extensions):
            image_files.append(file)
    
    if not image_files:
        print(f"‚ö†Ô∏è  No image files found in: {IMAGES_DIR}")
        print("   Supported formats: .jpg, .jpeg, .png, .webp")
        return False
    
    print(f"‚úÖ Found {len(image_files)} images in: {IMAGES_DIR}")
    print("   Available images:")
    for img_file in sorted(image_files):
        print(f"     - {img_file}")
    
    return True

# Sample recipes with ingredients and preparation steps
SAMPLE_RECIPES = [
    {
        "name": "Klasyczne nale≈õniki",
        "preparation_time": 30,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zmiksuj sk≈Çadniki na g≈Çadkie ciasto",
            "Odstaw ciasto na 10 minut do odpoczyniƒôcia", 
            "Sma≈º cienkie placki na ≈õrednim ogniu do zarumienienia"
        ],
        "ingredients": [
            ("MƒÖka pszenna", 250.0),  # 1 szklanka ‚âà 250g
            ("Mleko krowie", 250.0),  # 1 szklanka ‚âà 250ml
            ("Jajka", 2.0),
            ("Olej s≈Çonecznikowy", 15.0),  # 1 ≈Çy≈ºka ‚âà 15ml
            ("S√≥l kuchenna", 2.0)  # szczypta ‚âà 2g
        ]
    },
    {
        "name": "Awaryjne chlebki z patelni",
        "preparation_time": 25,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zagnieƒá ciasto z mƒÖki, jogurtu, proszku do pieczenia, soli i oleju",
            "Podziel na 6 r√≥wnych czƒô≈õci i uformuj kulki",
            "Rozwa≈Çkuj ka≈ºdƒÖ kulkƒô na cienki placek",
            "Sma≈º na suchej patelni po 2 minuty z ka≈ºdej strony"
        ],
        "ingredients": [
            ("MƒÖka pszenna", 200.0),
            ("Jogurt naturalny", 125.0),
            ("Proszek do pieczenia", 5.0),  # 1 ≈Çy≈ºeczka ‚âà 5g
            ("S√≥l kuchenna", 2.0),  # 1/4 ≈Çy≈ºeczki ‚âà 2g
            ("Olej s≈Çonecznikowy", 30.0)  # 2 ≈Çy≈ºki ‚âà 30ml
        ]
    },
    {
        "name": "Makaron aglio e olio",
        "preparation_time": 15,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Ugotuj makaron w osolonej wodzie al dente wed≈Çug instrukcji na opakowaniu",
            "Pokr√≥j czosnek w cienkie plasterki",
            "Na patelni rozgrzej oliwƒô, dodaj czosnek i p≈Çatki chili, sma≈º do zarumienienia",
            "Wymieszaj odcedzony makaron z aromatycznƒÖ oliwƒÖ",
            "Dopraw solƒÖ i podawaj natychmiast"
        ],
        "ingredients": [
            ("Makaron pszenny", 200.0),
            ("Czosnek", 3.0),
            ("Oliwa z oliwek", 40.0),
            ("P≈Çatki chili", 1.0),  # szczypta
            ("S√≥l kuchenna", 3.0)
        ]
    },
    {
        "name": "Jajecznica na ma≈õle",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Roztrzep jajka w misce, dopraw solƒÖ i pieprzem",
            "Roztop mas≈Ço na patelni na ma≈Çym ogniu",
            "Wlej roztrzepane jajka na patelniƒô",
            "Mieszaj ≈ÇopatkƒÖ na ma≈Çym ogniu do osiƒÖgniƒôcia lubianej konsystencji"
        ],
        "ingredients": [
            ("Jajka", 4.0),
            ("Mas≈Ço", 25.0),
            ("S√≥l kuchenna", 2.0),
            ("Pieprz czarny mielony", 1.0)
        ]
    },
    {
        "name": "Owsianka na wodzie",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zagotuj wodƒô z szczyptƒÖ soli w garnku",
            "Wsyp p≈Çatki owsiane do wrzƒÖcej wody",
            "Gotuj na ma≈Çym ogniu przez 5 minut, czƒôsto mieszajƒÖc",
            "Podawaj z miodem lub owocami wed≈Çug upodoba≈Ñ"
        ],
        "ingredients": [
            ("P≈Çatki owsiane", 125.0),  # 1/2 szklanki ‚âà 125g
            ("Woda", 250.0),  # 1 szklanka
            ("S√≥l kuchenna", 1.0),
            ("Mi√≥d", 15.0),  # opcjonalnie
            ("Jab≈Çka", 1.0)  # opcjonalnie
        ]
    },
    {
        "name": "Placuszki z banan√≥w i jajek",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zblenduj banany z jajkami na g≈ÇadkƒÖ masƒô",
            "Rozgrzej patelniƒô bez t≈Çuszczu",
            "Sma≈º ma≈Çe placuszki po 1 minucie z ka≈ºdej strony",
            "Podawaj od razu po usma≈ºeniu"
        ],
        "ingredients": [
            ("Banan", 2.0),
            ("Jajka", 2.0)
        ]
    },
    {
        "name": "Sur√≥wka z marchewki",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zetrzyj marchewkƒô na tarce o grubych oczkach",
            "Dodaj sok z cytryny i cukier",
            "Wymieszaj wszystkie sk≈Çadniki",
            "Odstaw na 5 minut, aby marchewka pu≈õci≈Ça sok"
        ],
        "ingredients": [
            ("Marchewka", 2.0),
            ("Cytryna", 0.5),  # sok z po≈Çowy cytryny
            ("Cukier bia≈Çy", 5.0)  # 1 ≈Çy≈ºeczka
        ]
    },
    {
        "name": "Domowy sos vinaigrette",
        "preparation_time": 5,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Wlej wszystkie sk≈Çadniki do s≈Çoiczka",
            "WstrzƒÖ≈õnij energicznie do po≈ÇƒÖczenia sk≈Çadnik√≥w",
            "Skosztuj i dostosuj przyprawy wed≈Çug upodoba≈Ñ",
            "Przechowuj w lod√≥wce do 1 tygodnia"
        ],
        "ingredients": [
            ("Oliwa z oliwek", 45.0),  # 3 ≈Çy≈ºki
            ("Ocet winny", 15.0),  # 1 ≈Çy≈ºka
            ("Musztarda", 2.5),  # 1/2 ≈Çy≈ºeczki
            ("S√≥l kuchenna", 2.0),
            ("Pieprz czarny mielony", 1.0)
        ]
    },
    {
        "name": "Pieczone ziemniaki",
        "preparation_time": 45,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Umyj ziemniaki i pokr√≥j w √≥semki (nie obieraj)",
            "Wymieszaj z olejem i solƒÖ w misce",
            "Roz≈Ç√≥≈º na blasze wy≈Ço≈ºonej papierem do pieczenia",
            "Piecz w 200¬∞C przez 35 minut, przewracajƒÖc w po≈Çowie czasu"
        ],
        "ingredients": [
            ("Ziemniaki", 600.0),  # 4 ≈õrednie ziemniaki ‚âà 600g
            ("Olej s≈Çonecznikowy", 30.0),  # 2 ≈Çy≈ºki
            ("S√≥l kuchenna", 5.0)  # 1 ≈Çy≈ºeczka
        ]
    },
    {
        "name": "Zupa pomidorowa z koncentratu",
        "preparation_time": 15,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Doprowad≈∫ bulion do wrzenia w garnku",
            "Wmieszaj koncentrat pomidorowy do gorƒÖcego bulionu",
            "Gotuj przez 5 minut na ma≈Çym ogniu",
            "Zabiel ≈õmietankƒÖ i dopraw solƒÖ oraz pieprzem"
        ],
        "ingredients": [
            ("Bulion warzywny (kostka)", 2.0),  # na 1l bulionu
            ("Koncentrat pomidorowy", 30.0),  # 2 ≈Çy≈ºki
            ("≈ömietana 30%", 100.0),
            ("S√≥l kuchenna", 3.0),
            ("Pieprz czarny mielony", 1.0),
            ("Woda", 1000.0)
        ]
    },
    {
        "name": "Omlet francuski",
        "preparation_time": 8,
        "complexity": ComplexityLevel.MEDIUM,
        "steps": [
            "RozmƒÖƒá jajka z solƒÖ w misce",
            "Roztop mas≈Ço na patelni na ≈õrednim ogniu",
            "Wlej roztrzepane jajka na patelniƒô",
            "≈ÅopatkƒÖ podsuwaj brzegi omleta ku ≈õrodkowi",
            "Gdy jeszcze lekko p≈Çynny, zwi≈Ñ na po≈Çowƒô i prze≈Ç√≥≈º na talerz"
        ],
        "ingredients": [
            ("Jajka", 3.0),
            ("Mas≈Ço", 15.0),
            ("S√≥l kuchenna", 2.0)
        ]
    },
    {
        "name": "Domowa lemoniada",
        "preparation_time": 10,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Wyci≈õnij sok z cytryny",
            "Rozpu≈õƒá cukier w odrobinie ciep≈Çej wody",
            "Po≈ÇƒÖcz sok cytrynowy z syropem cukrowym",
            "Dolej resztƒô zimnej wody i dok≈Çadnie wymieszaj",
            "Sch≈Ç√≥d≈∫ w lod√≥wce przed podaniem"
        ],
        "ingredients": [
            ("Cytryna", 1.0),
            ("Woda", 500.0),
            ("Cukier bia≈Çy", 30.0)  # 2 ≈Çy≈ºki
        ]
    },
    {
        "name": "Kluski ≈õlƒÖskie",
        "preparation_time": 40,
        "complexity": ComplexityLevel.MEDIUM,
        "steps": [
            "Ugotuj ziemniaki do miƒôkko≈õci, ostudziƒá i przeci≈õnij przez praskƒô",
            "Dodaj mƒÖkƒô ziemniaczanƒÖ, jajko i s√≥l do ziemniak√≥w",
            "Zagnieƒá g≈Çadkie ciasto (nie za d≈Çugo)",
            "Uformuj niewielkie kulki z charakterystycznƒÖ dziurkƒÖ",
            "Gotuj w osolonej wodzie przez 3 minuty od wyp≈Çyniƒôcia"
        ],
        "ingredients": [
            ("Ziemniaki", 500.0),  # ugotowane
            ("MƒÖka ziemniaczana", 150.0),
            ("Jajka", 1.0),
            ("S√≥l kuchenna", 5.0)
        ]
    },
    {
        "name": "Sos czosnkowy",
        "preparation_time": 35,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Zetrzyj czosnek na drobnej tarce lub przez praskƒô",
            "Wymieszaj jogurt z majonezem",
            "Dodaj starty czosnek, s√≥l i pieprz",
            "Wymieszaj wszystkie sk≈Çadniki",
            "Sch≈Ç√≥d≈∫ w lod√≥wce przez 30 minut przed podaniem"
        ],
        "ingredients": [
            ("Jogurt naturalny", 200.0),
            ("Czosnek", 1.0),
            ("Majonez", 15.0),  # 1 ≈Çy≈ºka
            ("S√≥l kuchenna", 2.0),
            ("Pieprz czarny mielony", 1.0)
        ]
    },
    {
        "name": "Kanapka BLT",
        "preparation_time": 12,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Podsma≈º plastry bekonu na patelni do chrupko≈õci",
            "Opiecz kromki chleba w tosterze",
            "Posmaruj pieczywo majonezem",
            "U≈Ç√≥≈º na chlebie sa≈Çatƒô, plastry pomidora i bekon",
            "Przykryj drugƒÖ kromkƒÖ i delikatnie doci≈õnij"
        ],
        "ingredients": [
            ("Boczek", 60.0),  # 2 plastry ‚âà 60g
            ("Pomidor", 0.5),  # 2 plasterki
            ("Sa≈Çata mas≈Çowa", 20.0),  # 2 li≈õcie
            ("Chleb pszenny", 60.0),  # 2 kromki
            ("Majonez", 20.0)
        ]
    },
    {
        "name": "Herbata miƒôtowa",
        "preparation_time": 8,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Op≈Çucz ≈õwie≈ºe li≈õcie miƒôty",
            "Zalej li≈õcie wrzƒÖtkiem",
            "Parz przez 5 minut pod przykryciem",
            "Odced≈∫ li≈õcie i dos≈Ç√≥d≈∫ wed≈Çug upodoba≈Ñ"
        ],
        "ingredients": [
            ("Miƒôta ≈õwie≈ºa", 10.0),  # 1 gar≈õƒá ‚âà 10g
            ("Woda", 300.0),
            ("Cukier bia≈Çy", 10.0)  # opcjonalnie
        ]
    },
    {
        "name": "Prosta focaccia",
        "preparation_time": 100,  # w≈ÇƒÖcznie z czasem na wyro≈õniƒôcie
        "complexity": ComplexityLevel.MEDIUM,
        "steps": [
            "Wymieszaj mƒÖkƒô z dro≈ºd≈ºami w misce",
            "Dodaj ciep≈ÇƒÖ wodƒô i 1 ≈Çy≈ºkƒô oliwy, zagnieƒá ciasto",
            "Prze≈Ç√≥≈º do naoliwionej miski, przykryj i wyrastaj 1 godzinƒô",
            "Prze≈Ç√≥≈º na naoliwionƒÖ blachƒô, posmaruj pozosta≈ÇƒÖ oliwƒÖ",
            "Posyp solƒÖ i rozmarynem, piecz 20 min w 220¬∞C"
        ],
        "ingredients": [
            ("MƒÖka pszenna", 250.0),
            ("Woda", 160.0),  # ciep≈Ça
            ("Dro≈ºd≈ºe instant", 4.0),
            ("Oliwa z oliwek", 30.0),  # 2 ≈Çy≈ºki
            ("S√≥l kuchenna", 5.0),
            ("Rozmaryn suszony", 2.0)
        ]
    },
    {
        "name": "Jednosk≈Çadnikowy d≈ºem z jab≈Çek",
        "preparation_time": 60,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Umyj, obierz i pokr√≥j jab≈Çka w kostkƒô",
            "W≈Ç√≥≈º do garnka o grubym dnie",
            "Du≈õ na ma≈Çym ogniu przez 40 minut, czƒôsto mieszajƒÖc",
            "Mia≈ºd≈º widelcem do osiƒÖgniƒôcia po≈ºƒÖdanej konsystencji",
            "Prze≈Ç√≥≈º do sterylnych s≈Çoik√≥w i zakrƒôƒá"
        ],
        "ingredients": [
            ("Jab≈Çka", 1000.0)  # 1 kg
        ]
    },
    {
        "name": "Szybka tortilla z mƒÖki kukurydzianej",
        "preparation_time": 15,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Wymieszaj mƒÖkƒô kukurydzianƒÖ z solƒÖ",
            "Dodaj ciep≈ÇƒÖ wodƒô i zagnieƒá g≈Çadkie ciasto",
            "Podziel na 6 r√≥wnych czƒô≈õci i uformuj kulki",
            "Rozwa≈Çkuj ka≈ºdƒÖ kulkƒô na cienki placek",
            "Sma≈º na suchej patelni po 30 sekund z ka≈ºdej strony"
        ],
        "ingredients": [
            ("MƒÖka kukurydziana", 120.0),
            ("Woda", 90.0),  # ciep≈Ça
            ("S√≥l kuchenna", 1.0)
        ]
    },
    {
        "name": "Koktajl banan-kakao",
        "preparation_time": 5,
        "complexity": ComplexityLevel.EASY,
        "steps": [
            "Obierz banana i pokr√≥j w kawa≈Çki",
            "W≈Ç√≥≈º wszystkie sk≈Çadniki do blendera",
            "Blenduj przez 30 sekund do uzyskania g≈Çadkiej konsystencji",
            "Podawaj natychmiast lub sch≈Ç√≥d≈∫ w lod√≥wce"
        ],
        "ingredients": [
            ("Banan", 1.0),
            ("Mleko krowie", 200.0),
            ("Kakao w proszku", 5.0)  # 1 ≈Çy≈ºeczka
        ]
    }
]

def create_default_user(db):
    """Create a default user for recipes if none exists."""
    user = db.query(User).filter(User.email == "admin@recipes.local").first()
    if not user:
        user = User(
            email="admin@recipes.local"
        )
        db.add(user)
        db.commit()
        db.refresh(user)
        print("‚úÖ Created default user: admin@recipes.local")
    return user

def find_ingredient_by_name(db, name):
    """Find ingredient by name, trying different variations."""
    # Pr√≥buj dok≈Çadnej nazwy
    ingredient = db.query(Ingredient).filter(Ingredient.name == name).first()
    if ingredient:
        return ingredient
    
    # Pr√≥buj bez doprecyzowa≈Ñ w nawiasach
    simple_name = name.split('(')[0].strip()
    ingredient = db.query(Ingredient).filter(Ingredient.name == simple_name).first()
    if ingredient:
        return ingredient
    
    # Mapowania dla specjalnych przypadk√≥w
    name_mappings = {
        "P≈Çatki owsiane": "P≈Çatki owsiane",
        "Proszek do pieczenia": "Proszek do pieczenia", 
        "P≈Çatki chili": "Papryka chili suszona",
        "Mi√≥d": "Mi√≥d naturalny",
        "MƒÖka ziemniaczana": "MƒÖka ziemniaczana",
        "Koncentrat pomidorowy": "Koncentrat pomidorowy",
        "Dro≈ºd≈ºe instant": "Dro≈ºd≈ºe instant",
        "Rozmaryn suszony": "Rozmaryn suszony",
        "Miƒôta ≈õwie≈ºa": "Miƒôta",
        "MƒÖka kukurydziana": "MƒÖka kukurydziana",
        "Kakao w proszku": "Kakao",
        "Chleb pszenny": "Chleb",
        "Ocet winny": "Ocet"
    }
    
    if name in name_mappings:
        mapped_name = name_mappings[name]
        ingredient = db.query(Ingredient).filter(Ingredient.name == mapped_name).first()
        if ingredient:
            return ingredient
    
    return None

def populate_recipes():
    """Add sample recipes to the database."""
    db = SessionLocal()
    try:
        print("üçΩÔ∏è  Starting to populate recipes database...")
        
        # Check images directory
        if not check_images_directory():
            print("‚ö†Ô∏è  Proceeding without images...")
        
        # Check if recipes already exist
        existing_count = db.query(Recipe).count()
        update_images_only = False
        if existing_count > 0:
            print(f"‚ö†Ô∏è  Database already contains {existing_count} recipes.")
            print("Choose an option:")
            print("1. Add new recipes only (skip existing)")
            print("2. Update images for existing recipes")
            print("3. Add new recipes and update images for existing")
            print("4. Cancel")
            
            choice = input("Enter your choice (1-4): ").strip()
            if choice == '1':
                update_images_only = False
            elif choice == '2':
                update_images_only = True
            elif choice == '3':
                update_images_only = 'both'
            else:
                print("‚ùå Operation cancelled.")
                return
        
        # Create default user
        default_user = create_default_user(db)
        
        added_count = 0
        updated_count = 0
        skipped_count = 0
        missing_ingredients = set()
        
        for recipe_data in SAMPLE_RECIPES:
            # Check if recipe already exists
            existing = db.query(Recipe).filter(Recipe.name == recipe_data["name"]).first()
            
            if existing and update_images_only == False:
                print(f"‚è≠Ô∏è  Skipping '{recipe_data['name']}' - already exists")
                skipped_count += 1
                continue
            
            # Load local image for recipe
            print(f"   üì∏ Loading local image for '{recipe_data['name']}'...")
            image_bytes, filename = load_local_recipe_image(recipe_data["name"])
            image_data = image_bytes_to_base64(image_bytes) if image_bytes else None
            
            if image_data:
                size_kb = len(image_data.encode()) / 1024
                print(f"   ‚úÖ Loaded image ({size_kb:.1f} KB) ‚Üí {filename}")
            else:
                print(f"   ‚ö†Ô∏è  No image loaded (file not found or processing error)")
            
            # Handle existing recipe (update image only)
            if existing:
                if update_images_only == True or update_images_only == 'both':
                    existing.image_data = image_data
                    print(f"üîÑ Updated image for existing recipe: {recipe_data['name']}")
                    updated_count += 1
                continue
            
            # Create new recipe
            recipe = Recipe(
                name=recipe_data["name"],
                preparation_time_minutes=recipe_data["preparation_time"],
                complexity_level=recipe_data["complexity"],
                steps=recipe_data["steps"],
                author_id=default_user.id,
                image_data=image_data
            )
            db.add(recipe)
            db.flush()  # Get the recipe ID
            
            # Add ingredients
            ingredients_added = 0
            for ingredient_name, amount in recipe_data["ingredients"]:
                ingredient = find_ingredient_by_name(db, ingredient_name)
                if ingredient:
                    recipe_ingredient = RecipeIngredient(
                        recipe_id=recipe.id,
                        ingredient_id=ingredient.id,
                        amount=amount,
                        is_optional="false"
                    )
                    db.add(recipe_ingredient)
                    ingredients_added += 1
                else:
                    missing_ingredients.add(ingredient_name)
                    print(f"   ‚ö†Ô∏è  Missing ingredient: {ingredient_name}")
            
            print(f"‚úÖ Added recipe: {recipe_data['name']} ({ingredients_added}/{len(recipe_data['ingredients'])} ingredients)")
            added_count += 1
        
        # Commit all changes
        db.commit()
        
        # Check how many recipes have images
        recipes_with_images = db.query(Recipe).filter(Recipe.image_data.isnot(None)).count()
        total_recipes = db.query(Recipe).count()
        
        print(f"\nüéâ Successfully processed database!")
        print(f"   - Added: {added_count} new recipes")
        print(f"   - Updated: {updated_count} existing recipes")
        print(f"   - Skipped: {skipped_count} existing recipes")
        print(f"   - Total recipes in database: {total_recipes}")
        print(f"   - Recipes with images: {recipes_with_images}/{total_recipes} ({recipes_with_images/total_recipes*100:.1f}%)")
        
        if PILLOW_AVAILABLE and added_count > 0:
            print(f"   - Local images loaded from: {IMAGES_DIR}")
        elif not PILLOW_AVAILABLE and added_count > 0:
            print(f"   - ‚ö†Ô∏è  Install Pillow to process images: pip install Pillow==10.2.0")
        
        if missing_ingredients:
            print(f"\n‚ö†Ô∏è  Missing ingredients ({len(missing_ingredients)}):")
            for ingredient in sorted(missing_ingredients):
                print(f"   - {ingredient}")
            print("\nüí° Consider running populate_ingredients.py first or adding these ingredients manually.")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Error populating database: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    populate_recipes()