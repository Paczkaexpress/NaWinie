# Project Overview and Technical Documentation

## Project Description

This is a modern web application built using a robust full-stack architecture, combining cutting-edge frontend technologies with a powerful backend infrastructure. The project follows industry best practices and emphasizes code quality, maintainability, and developer experience.

## Technology Stack

### Frontend
- **Framework**: Astro 5 with React 19 integration
- **Language**: TypeScript 5
- **Styling**: Tailwind CSS 4
- **UI Components**: Shadcn/ui
- **Testing**: Vitest

### Backend
- **Framework**: FastAPI (Python)
- **API Documentation**: Auto-generated OpenAPI/Swagger docs

### AI Integration
- **Models**: Support for both local and OpenAI API integration
- **Implementation**: Flexible architecture supporting multiple AI model providers

### DevOps & Infrastructure
- **CI/CD**: GitHub Actions
- **Hosting**: DigitalOcean
- **Version Control**: Git

## Development Rules and Guidelines

### Code Quality Standards
1. All code must be typed using TypeScript
2. Follow the established code formatting rules (Prettier)
3. Maintain comprehensive documentation
4. Write unit tests for new features

### Git Workflow
1. Use feature branches for development
2. Write clear, descriptive commit messages
3. Squash commits before merging
4. Require code review before merging to main

### Documentation Requirements
1. Keep README files up to date
2. Document API endpoints
3. Include inline code comments for complex logic
4. Update technical documentation when making architectural changes

### Testing Standards
1. Write unit tests for new features
2. Maintain minimum code coverage requirements
3. Include integration tests for critical paths
4. Test across supported browsers

### Security Guidelines
1. Never commit sensitive credentials
2. Use environment variables for configuration
3. Follow OWASP security best practices
4. Regular security audits and updates

### Performance Standards
1. Optimize bundle sizes
2. Implement lazy loading where appropriate
3. Monitor and optimize API response times
4. Regular performance testing and optimization

## Project Structure

```
├── frontend/           # Astro + React frontend application
├── backend/           # FastAPI backend application
├── ai/                # AI integration modules
├── docs/             # Project documentation
├── tests/            # Test suites
└── .github/          # GitHub Actions workflows
```

## Getting Started

1. Clone the repository
2. Install dependencies for both frontend and backend
3. Set up environment variables
4. Run development servers
5. Access the application at localhost

## Contributing

1. Review the coding standards
2. Set up your development environment
3. Follow the git workflow
4. Submit pull requests with appropriate documentation
5. Ensure all tests pass before submission

## Support and Resources

- Project Wiki
- Technical Documentation
- Team Communication Channels
- Issue Tracking System

---

*Note: This document serves as a living guide and will be updated as the project evolves.* 